class Profile {
    constructor() {
        this.userData = this.loadUserData();
        this.activeTab = 'personal';
    }

    loadUserData() {
        const stored = localStorage.getItem('userData');
        return stored ? JSON.parse(stored) : {
            firstName: '',
            phone: '',
            email: '',
            address: '',
            orders: [],
            favorites: [],
            bonusPoints: 2500,
            totalSpent: 45000,
            notifications: {
                orders: true,
                promotions: true,
                news: false
            }
        };
    }

    saveUserData() {
        localStorage.setItem('userData', JSON.stringify(this.userData));
        DataService.userData = { ...DataService.userData, ...this.userData };
    }

    render() {
        const profileScreen = document.getElementById('profile-screen');
        if (!profileScreen) return;

        const userLevel = DataService.getUserLevel();

        profileScreen.innerHTML = `
            <!-- –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ -->
            <div class="profile-header">
                <div class="profile-avatar">
                    <div class="avatar-circle">
                        <span class="avatar-text">${this.userData.firstName ? this.userData.firstName[0].toUpperCase() : '–ü'}</span>
                    </div>
                </div>
                <div class="profile-info">
                    <h2>${this.userData.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</h2>
                    <p class="profile-phone">${this.userData.phone || '–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}</p>
                </div>
                <div class="profile-level">
                    <div class="level-badge" style="background: ${userLevel.color}">
                        ${userLevel.name}
                    </div>
                    <div class="bonus-points">
                        <span class="bonus-count">${this.userData.bonusPoints}</span>
                        <span class="bonus-label">–±–∞–ª–ª–æ–≤</span>
                    </div>
                </div>
            </div>

            <!-- –ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ -->
            <div class="bonus-system glass-card">
                <h3>üíé –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</h3>
                <div class="bonus-progress">
                    <div class="progress-info">
                        <span>–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: <strong style="color: ${userLevel.color}">${userLevel.name}</strong></span>
                        <span class="discount">–°–∫–∏–¥–∫–∞: ${userLevel.discount}%</span>
                    </div>
                    <div class="progress-bar-bonus">
                        <div class="progress-fill-bonus" style="width: ${this.getBonusProgress()}%"></div>
                    </div>
                    <div class="progress-levels">
                        ${DataService.bonusSystem.levels.map(level => `
                            <div class="level-point ${this.userData.bonusPoints >= level.minPoints ? 'active' : ''}" 
                                 style="--level-color: ${level.color}">
                                <span class="level-name">${level.name}</span>
                                <span class="level-points">${level.minPoints} –±.</span>
                            </div>
                        `).join('')}
                    </div>
                </div>
                <div class="bonus-stats">
                    <div class="stat-item">
                        <span class="stat-value">${this.userData.totalSpent.toLocaleString()} ‚ÇΩ</span>
                        <span class="stat-label">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value">${this.userData.orders.length}</span>
                        <span class="stat-label">–ó–∞–∫–∞–∑–æ–≤</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value">${this.userData.favorites.length}</span>
                        <span class="stat-label">–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º</span>
                    </div>
                </div>
            </div>

            <!-- –í–∫–ª–∞–¥–∫–∏ -->
            <div class="profile-tabs">
                <button class="tab-btn ${this.activeTab === 'personal' ? 'active' : ''}" data-tab="personal">
                    üë§ –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                </button>
                <button class="tab-btn ${this.activeTab === 'orders' ? 'active' : ''}" data-tab="orders">
                    üì¶ –ó–∞–∫–∞–∑—ã
                </button>
                <button class="tab-btn ${this.activeTab === 'favorites' ? 'active' : ''}" data-tab="favorites">
                    ‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
                </button>
                <button class="tab-btn ${this.activeTab === 'settings' ? 'active' : ''}" data-tab="settings">
                    ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                </button>
            </div>

            <!-- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫ -->
            <div class="tab-content">
                ${this.renderTabContent()}
            </div>
        `;

        this.setupEventListeners();
    }

    renderTabContent() {
        switch (this.activeTab) {
            case 'personal':
                return `
                    <div class="profile-section glass-card">
                        <h3>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                        <div class="profile-field">
                            <label>–ò–º—è *</label>
                            <input type="text" id="user-name" value="${this.userData.firstName}" placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è">
                        </div>
                        <div class="profile-field">
                            <label>–¢–µ–ª–µ—Ñ–æ–Ω *</label>
                            <input type="tel" id="user-phone" value="${this.userData.phone}" placeholder="+7 (___) ___-__-__">
                        </div>
                        <div class="profile-field">
                            <label>Email</label>
                            <input type="email" id="user-email" value="${this.userData.email}" placeholder="example@mail.com">
                        </div>
                        <div class="profile-field">
                            <label>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</label>
                            <textarea id="user-address" placeholder="–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏" rows="3">${this.userData.address}</textarea>
                        </div>
                        <button class="btn-save" onclick="window.profile.saveProfile()">
                            üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        </button>
                    </div>
                `;

            case 'orders':
                return `
                    <div class="profile-section glass-card">
                        <h3>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</h3>
                        <div class="orders-list">
                            ${this.userData.orders.length === 0 ? `
                                <div class="empty-state">
                                    <div class="empty-icon">üì¶</div>
                                    <h4>–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</h4>
                                    <p>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</p>
                                    <button class="btn-add" data-screen="home">–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º</button>
                                </div>
                            ` : this.userData.orders.map(order => `
                                <div class="order-item">
                                    <div class="order-header">
                                        <span class="order-number">–ó–∞–∫–∞–∑ #${order.id}</span>
                                        <span class="order-date">${new Date(order.date).toLocaleDateString()}</span>
                                    </div>
                                    <div class="order-details">
                                        <span class="order-status status-${order.status || 'new'}">
                                            ${this.getOrderStatusText(order.status || 'new')}
                                        </span>
                                        <span class="order-total">${order.total} ‚ÇΩ</span>
                                    </div>
                                    <div class="order-items">
                                        ${order.items?.slice(0, 2).map(item => `
                                            <span class="order-item-name">${item.title}</span>
                                        `).join(', ')}
                                        ${order.items?.length > 2 ? ` –∏ –µ—â—ë ${order.items.length - 2}` : ''}
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                `;

            case 'favorites':
                const favoriteProducts = this.userData.favorites.map(id => DataService.getProduct(id)).filter(Boolean);
                return `
                    <div class="profile-section glass-card">
                        <h3>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</h3>
                        <div class="favorites-list">
                            ${favoriteProducts.length === 0 ? `
                                <div class="empty-state">
                                    <div class="empty-icon">üíñ</div>
                                    <h4>–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</h4>
                                    <p>–î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞</p>
                                    <button class="btn-add" data-screen="home">–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã</button>
                                </div>
                            ` : favoriteProducts.map(product => `
                                <div class="favorite-item">
                                    <img src="${product.image}" alt="${product.title}">
                                    <div class="favorite-info">
                                        <h4>${product.title}</h4>
                                        <p class="favorite-brand">${DataService.getCarBrand(product.brandId)?.name}</p>
                                        <p class="favorite-price">${product.price} ‚ÇΩ</p>
                                    </div>
                                    <div class="favorite-actions">
                                        <button class="btn-remove" onclick="window.profile.removeFromFavorites('${product.id}')">üóëÔ∏è</button>
                                        <button class="btn-add" onclick="window.cart.addItem(${JSON.stringify(product).replace(/"/g, '&quot;')})">–í –∫–æ—Ä–∑–∏–Ω—É</button>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                `;

            case 'settings':
                return `
                    <div class="profile-section glass-card">
                        <h3>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
                        <div class="settings-list">
                            <div class="setting-item">
                                <div class="setting-info">
                                    <span class="setting-title">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö</span>
                                    <span class="setting-description">–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞</span>
                                </div>
                                <label class="toggle">
                                    <input type="checkbox" ${this.userData.notifications.orders ? 'checked' : ''} data-notification="orders">
                                    <span class="toggle-slider"></span>
                                </label>
                            </div>
                            <div class="setting-item">
                                <div class="setting-info">
                                    <span class="setting-title">–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏</span>
                                    <span class="setting-description">–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã</span>
                                </div>
                                <label class="toggle">
                                    <input type="checkbox" ${this.userData.notifications.promotions ? 'checked' : ''} data-notification="promotions">
                                    <span class="toggle-slider"></span>
                                </label>
                            </div>
                            <div class="setting-item">
                                <div class="setting-info">
                                    <span class="setting-title">–ù–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏</span>
                                    <span class="setting-description">–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏</span>
                                </div>
                                <label class="toggle">
                                    <input type="checkbox" ${this.userData.notifications.news ? 'checked' : ''} data-notification="news">
                                    <span class="toggle-slider"></span>
                                </label>
                            </div>
                        </div>
                        
                        <div class="danger-zone">
                            <h4>‚ö†Ô∏è –û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞</h4>
                            <button class="btn-danger" onclick="window.profile.clearAllData()">
                                üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                            </button>
                        </div>
                    </div>
                `;

            default:
                return '<div>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>';
        }
    }

    setupEventListeners() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.activeTab = e.target.getAttribute('data-tab');
                this.render();
            });
        });

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        document.querySelectorAll('input[data-notification]').forEach(input => {
            input.addEventListener('change', (e) => {
                const notificationType = e.target.getAttribute('data-notification');
                this.userData.notifications[notificationType] = e.target.checked;
                this.saveUserData();
            });
        });

        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelectorAll('[data-screen]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const screen = e.target.getAttribute('data-screen');
                window.app.showScreen(screen);
            });
        });
    }

    getBonusProgress() {
        const currentLevel = DataService.getUserLevel();
        const currentIndex = DataService.bonusSystem.levels.findIndex(l => l.name === currentLevel.name);
        const nextLevel = DataService.bonusSystem.levels[currentIndex + 1];
        
        if (!nextLevel) return 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        
        const progress = ((this.userData.bonusPoints - currentLevel.minPoints) / 
                         (nextLevel.minPoints - currentLevel.minPoints)) * 100;
        return Math.min(100, Math.max(0, progress));
    }

    getOrderStatusText(status) {
        const statuses = {
            'new': 'üîÑ –ù–æ–≤—ã–π',
            'processing': '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
            'shipped': 'üöö –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è',
            'delivered': '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
            'cancelled': '‚ùå –û—Ç–º–µ–Ω—ë–Ω'
        };
        return statuses[status] || '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    saveProfile() {
        this.userData.firstName = document.getElementById('user-name').value;
        this.userData.phone = document.getElementById('user-phone').value;
        this.userData.email = document.getElementById('user-email').value;
        this.userData.address = document.getElementById('user-address').value;
        
        this.saveUserData();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!', 'success');
        this.render(); // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    }

    removeFromFavorites(productId) {
        this.userData.favorites = this.userData.favorites.filter(id => id !== productId);
        DataService.removeFromFavorites(productId);
        this.saveUserData();
        this.render();
    }

    clearAllData() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.')) {
            localStorage.clear();
            this.userData = this.loadUserData();
            this.showNotification('üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã', 'info');
            this.render();
        }
    }

    showNotification(message, type = 'info') {
        // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#10B981' : '#3B82F6'};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            z-index: 1000;
            animation: slideIn 0.3s ease;
        `;
        
        document.body.appendChild(notification);
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    addOrder(order) {
        this.userData.orders.unshift({
            id: order.id,
            date: order.date,
            total: order.total,
            items: order.items,
            status: 'new'
        });
        this.saveUserData();
        this.render();
    }
}